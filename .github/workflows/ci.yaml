name: Go CI Pipeline

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main, 'feature/**' ]

jobs:

  # lint:
  #   name: Lint & Vet
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.21.13'

  #     - uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: v1.64.8
  #         args: --out-format=colored-line-number --timeout=3m

  #     - name: Run go vet
  #       run: go vet ./...

  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.21.13'
  #     - run: make test

  # helm-lint:
  #   name: Helm Lint
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Helm
  #       run: |
  #         curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  #         chmod 700 get_helm.sh
  #         ./get_helm.sh
  #     - name: Lint Helm chart
  #       run: |
  #         helm lint helm/controller

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    # needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21.13'
      - run: make build

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - run: |
          IMAGE="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):${{ github.sha }}"
          docker build -t $IMAGE .
          echo "IMAGE_NAME=$IMAGE" >> $GITHUB_ENV


  patch-kustomize-image:
    name: Patch kustomize image tag
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4
      - name: Patch kustomization.yaml with image name and tag
        run: |
          IMAGE="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          TAG="${{ github.sha }}"
          sed -i "s|newName:.*|newName: $IMAGE|" kustomize/overlays/dev/kustomization.yaml
          sed -i "s|newTag:.*|newTag: $TAG|" kustomize/overlays/dev/kustomization.yaml



  # security:
  #   name: Security Scan with Trivy
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Rebuild controller:latest for scan
  #       run: docker build -t controller:latest .

  #     - name: Run Trivy scan
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: 'controller:latest'
  #         format: 'table'
  #         exit-code: '1'
  #         ignore-unfixed: true
  #         vuln-type: 'os,library'
  #         severity: 'MEDIUM,HIGH,CRITICAL'

  kustomize-validate:
    name: Validate Kustomize manifests
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4

      - name: Install kustomize, yamllint
        run: |
          if ! command -v kustomize &>/dev/null; then
            curl -sSfL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.2/kustomize_v5.4.2_linux_amd64.tar.gz | tar -xz
            sudo mv kustomize /usr/local/bin/kustomize
          else
            echo "kustomize already installed: $(kustomize version)"
          fi

      - name: Kustomize build dev overlay
        run: kustomize build kustomize/overlays/dev/